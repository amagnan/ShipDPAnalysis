import pandas as pd
import numpy as np
import os,sys,getopt
from array import array

comp = "all"

try:
        opts, args = getopt.getopt(sys.argv[1:], "d:c:", ["date=","comp="])

except getopt.GetoptError:
        print 'exit the system'
        sys.exit()

for o,a in opts:
        if o in ('-d',): date = a
        if o in ('-c',): comp = a

pathR = "../data/"+date+"/"

import ROOT
#For the axis titles:
ROOT.gStyle.SetTitleColor(1, "XYZ")
ROOT.gStyle.SetTitleFont(42, "XYZ")
ROOT.gStyle.SetTitleSize(0.04, "XYZ")

ROOT.gStyle.SetTitleXOffset(0.65)
ROOT.gStyle.SetTitleYOffset(0.95)

#For the axis labels:
ROOT.gStyle.SetLabelColor(1, "XYZ")
ROOT.gStyle.SetLabelFont(42, "XYZ")
ROOT.gStyle.SetLabelOffset(0.007, "XYZ")
ROOT.gStyle.SetLabelSize(0.04, "XYZ")

#For the axis:
ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetStripDecimals(True)
ROOT.gStyle.SetTickLength(0.02, "XYZ")
ROOT.gStyle.SetNdivisions(510, "XYZ")
ROOT.gStyle.SetPadTickX(1)      #To get tick marks on the opposite side of the frame
ROOT.gStyle.SetPadTickY(1)

c1      = ROOT.TCanvas('c1', '',1920,1080)
mulgr = ROOT.TMultiGraph()


#c1.SetLeftMargin(0.10)
#c1.SetTopMargin(0.05)
#c1.SetBottomMargin(0.05)
c1.SetRightMargin(0.05)

c1.SetLogy()
c1.SetGrid()


if comp=="new":
        data1 = pd.read_csv(pathR+'qcd_Rate1.csv', header=None)
        data2 = pd.read_csv(pathR+'meson_Rate1.csv', header=None)
        data3 = pd.read_csv(pathR+'pbrem_Rate1.csv', header=None)
        dataC = pd.read_csv(pathR+'comb_Rate1.csv', header=None)
        d20, d21 = array('f'), array('f') 
        d30, d31 = array('f'), array('f')
        d10, d11 = array('f'), array('f')
        dC0, dC1 = array('f'), array('f')
        for i in data1[0]: d10.append(float(i))
        for i in data1[1]: d11.append(float(i))
        for i in data2[0]: d20.append(float(i))
        for i in data2[1]: d21.append(float(i))
        for i in data3[0]: d30.append(float(i))
        for i in data3[1]: d31.append(float(i))
        for i in dataC[0]: dC0.append(float(i))
        for i in dataC[1]: dC1.append(float(i))
        p2=ROOT.TGraph(len(data2[1]),d20, d21)
        p3=ROOT.TGraph(len(data3[1]),d30, d31)
        p1=ROOT.TGraph(len(data1[1]),d10, d11)
        pC=ROOT.TGraph(len(dataC[1]),dC0, dC1)
        p3.SetLineColor(3)
        p2.SetLineColor(2)
        p1.SetLineColor(4)
        pC.SetLineColor(1)
        p3.SetMarkerColor(3)
        p2.SetMarkerColor(2)
        p1.SetMarkerColor(4)
        pC.SetMarkerColor(1)
        pC.SetLineWidth(3)
        p3.SetLineWidth(3)
        p2.SetLineWidth(3)
        p1.SetLineWidth(3)
        p3.SetTitle("Pbrem VDM")
        p2.SetTitle("Meson")
        p1.SetTitle("QCD")
        pC.SetTitle("Combined VDM")
        mulgr.Add(p1)
        mulgr.Add(p2)
        mulgr.Add(p3)
        mulgr.Add(pC)

if comp=="old":
        data1 = pd.read_csv(pathR+'qcd_Rate1.csv', header=None)
        data2 = pd.read_csv(pathR+'meson_Rate1.csv', header=None)
        data4 = pd.read_csv(pathR+'pbrem1_Rate1.csv', header=None)
        dataO = pd.read_csv(pathR+'comb1_Rate1.csv', header=None)
        d20, d21 = array('f'), array('f')
        d10, d11 = array('f'), array('f')
        d00, d01 = array('f'), array('f')
        d40, d41 = array('f'), array('f')
        for i in data1[0]: d10.append(float(i))
        for i in data1[1]: d11.append(float(i))
        for i in data2[0]: d20.append(float(i))
        for i in data2[1]: d21.append(float(i))
        for i in data4[0]: d40.append(float(i))
        for i in data4[1]: d41.append(float(i))
        for i in dataO[0]: d00.append(float(i))
        for i in dataO[1]: d01.append(float(i))
        p2=ROOT.TGraph(len(data2[1]),d20, d21)
        p4=ROOT.TGraph(len(data4[1]),d40, d41)
        p1=ROOT.TGraph(len(data1[1]),d10, d11)
        p0=ROOT.TGraph(len(dataO[1]),d00, d01)
        p4.SetLineColor(3)
        p2.SetLineColor(2)
        p1.SetLineColor(4)
        p0.SetLineColor(1)
        p4.SetMarkerColor(3)
        p2.SetMarkerColor(2)
        p1.SetMarkerColor(4)
        p0.SetMarkerColor(1)
        p0.SetLineWidth(3)
        p4.SetLineWidth(3)
        p2.SetLineWidth(3)
        p1.SetLineWidth(3)
        p4.SetTitle("Pbrem Dipole")
        p2.SetTitle("Meson")
        p1.SetTitle("QCD")
        p0.SetTitle("Combined Dipole")
        mulgr.Add(p1)
        mulgr.Add(p2)
        mulgr.Add(p4)
        mulgr.Add(p0)

if comp=="all":
        data1 = pd.read_csv(pathR+'qcd_Rate1.csv', header=None)
        data2 = pd.read_csv(pathR+'meson_Rate1.csv', header=None)
        data3 = pd.read_csv(pathR+'pbrem_Rate1.csv', header=None)
        data4 = pd.read_csv(pathR+'pbrem1_Rate1.csv', header=None)
        dataC = pd.read_csv(pathR+'comb_Rate1.csv', header=None)
        dataO = pd.read_csv(pathR+'comb1_Rate1.csv', header=None)
        d20, d21 = array('f'), array('f')
        d30, d31 = array('f'), array('f')
        d10, d11 = array('f'), array('f')
        dC0, dC1 = array('f'), array('f')
        d00, d01 = array('f'), array('f')
        d40, d41 = array('f'), array('f')
        for i in data1[0]: d10.append(float(i))
        for i in data1[1]: d11.append(float(i))
        for i in data2[0]: d20.append(float(i))
        for i in data2[1]: d21.append(float(i))
        for i in data3[0]: d30.append(float(i))
        for i in data3[1]: d31.append(float(i))
        for i in data4[0]: d40.append(float(i))
        for i in data4[1]: d41.append(float(i))
        for i in dataO[0]: d00.append(float(i))
        for i in dataO[1]: d01.append(float(i))
        for i in dataC[0]: dC0.append(float(i))
        for i in dataC[1]: dC1.append(float(i))
        p2=ROOT.TGraph(len(data2[1]),d20, d21)
        p4=ROOT.TGraph(len(data4[1]),d40, d41)
        p3=ROOT.TGraph(len(data3[1]),d30, d31)
        p1=ROOT.TGraph(len(data1[1]),d10, d11)
        pC=ROOT.TGraph(len(dataC[1]),dC0, dC1)
        p0=ROOT.TGraph(len(dataO[1]),d00, d01)
        p4.SetLineColor(6)
        p3.SetLineColor(3)
        p2.SetLineColor(2)
        p1.SetLineColor(4)
        pC.SetLineColor(1)
        p0.SetLineColor(7)
        p4.SetMarkerColor(6)
        p3.SetMarkerColor(3)
        p2.SetMarkerColor(2)
        p1.SetMarkerColor(4)
        pC.SetMarkerColor(1)
        p0.SetMarkerColor(7)
        pC.SetLineWidth(3)
        p0.SetLineWidth(3)
        p4.SetLineWidth(3)
        p3.SetLineWidth(3)
        p2.SetLineWidth(3)
        p1.SetLineWidth(3)
        p4.SetTitle("Pbrem Dipole")
        p3.SetTitle("Pbrem VDM")
        p2.SetTitle("Meson")
        p1.SetTitle("QCD")
        pC.SetTitle("Combined VDM")
        p0.SetTitle("Combined Dipole")
        mulgr.Add(p1)
        mulgr.Add(p2)
        mulgr.Add(p4)
        mulgr.Add(p0)
        mulgr.Add(p3)
        mulgr.Add(pC)
if comp=="C":
        data4 = pd.read_csv('../data/181119/comb_Rate1.csv', header=None)
        dataC = pd.read_csv(pathR+'comb_Rate1.csv', header=None)
        dataO = pd.read_csv(pathR+'comb1_Rate1.csv', header=None)
        dC0, dC1 = array('f'), array('f')
        d00, d01 = array('f'), array('f')
        d40, d41 = array('f'), array('f')
        for i in data4[0]: d40.append(float(i))
        for i in data4[1]: d41.append(float(i))
        for i in dataO[0]: d00.append(float(i))
        for i in dataO[1]: d01.append(float(i))
        for i in dataC[0]: dC0.append(float(i))
        for i in dataC[1]: dC1.append(float(i))
        p4=ROOT.TGraph(len(data4[1]),d40, d41)
        pC=ROOT.TGraph(len(dataC[1]),dC0, dC1)
        p0=ROOT.TGraph(len(dataO[1]),d00, d01)
        p4.SetLineColor(6)
        pC.SetLineColor(1)
        p0.SetLineColor(7)
        p4.SetMarkerColor(6)
        pC.SetMarkerColor(1)
        p0.SetMarkerColor(7)
        pC.SetLineWidth(3)
        p0.SetLineWidth(3)
        p4.SetLineWidth(3)
        p4.SetTitle("Previous Combined Dipole")
        pC.SetTitle("Combined VDM")
        p0.SetTitle("Combined Dipole")
        mulgr.Add(p4)
        mulgr.Add(p0)
        mulgr.Add(pC)

mulgr.SetTitle(";m_{#gamma^{D}}(MeV/c^{2});#varepsilon^{2}")
xaxis=mulgr.GetXaxis()
xaxis.SetLimits(2,4105)
mulgr.SetMaximum(10**-5)
mulgr.SetMinimum(10**-18)
mulgr.Draw("AL")
Leg=c1.BuildLegend(0.75,0.70,0.95,.9)
Leg.Draw("L")
c1.Modify()
c1.Update()
c1.SaveAs(pathR+"Excl_"+str(comp)+".pdf")
c1.Print(pathR+"Excl_"+str(comp)+".root")
c1.SetLogx()
c1.Modify()
c1.Update()
c1.SaveAs(pathR+"Excl_"+str(comp)+"Log.pdf")
c1.Print(pathR+"Excl_"+str(comp)+"Log.root")
c1.Print(pathR+"Excl_"+str(comp)+"Log.C")

