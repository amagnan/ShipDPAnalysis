import pandas as pd
import numpy as np
import os,sys,getopt
from array import array

comp = "all"

try:
        opts, args = getopt.getopt(sys.argv[1:], "d:c:", ["date=","comp="])

except getopt.GetoptErrorRate:
        print 'exit the system'
        sys.exit()

for o,a in opts:
        if o in ('-d',): date = a
        if o in ('-c',): comp = a

pathR = "../data/"+date+"/"

import ROOT
#For the axis titles:
ROOT.gStyle.SetTitleColor(1, "XYZ")
ROOT.gStyle.SetTitleFont(42, "XYZ")
ROOT.gStyle.SetTitleSize(0.04, "XYZ")

ROOT.gStyle.SetTitleXOffset(1.15)
ROOT.gStyle.SetTitleYOffset(0.95)

#For the axis labels:
ROOT.gStyle.SetLabelColor(1, "XYZ")
ROOT.gStyle.SetLabelFont(42, "XYZ")
ROOT.gStyle.SetLabelOffset(0.005, "XYZ")
ROOT.gStyle.SetLabelSize(0.04, "XYZ")

#For the axis:
ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetStripDecimals(True)
ROOT.gStyle.SetTickLength(0.02, "XYZ")
ROOT.gStyle.SetNdivisions(510, "XYZ")
ROOT.gStyle.SetPadTickX(1)      #To get tick marks on the opposite side of the frame
ROOT.gStyle.SetPadTickY(1)

c1      = ROOT.TCanvas('c1', '',1920,1080)


#c1.SetLeftMargin(0.10)
#c1.SetTopMargin(0.05)
#c1.SetBottomMargin(0.05)
c1.SetRightMargin(0.05)

c1.SetLogy()
c1.SetGrid()

if comp=="alp":
    data1 = pd.read_csv(pathR+'ALPACA_rate_Ordered.csv', header=None)
    #data1 = pd.read_csv(pathR+'ALPACA_FixedRate1.csv', header=None)
    d10, d11 = array('f'), array('f')
    for i in data1[0]: d10.append(float(i))
    for i in data1[1]: d11.append(float(i))
    p1=ROOT.TGraph(len(data1[1]),d10, d11)
    p1.SetLineColor(4)
    p1.SetMarkerColor(4)
    p1.SetLineWidth(1)
    p1.SetTitle(";m_{#alpha}(MeV/c^{2});g_{#alpha#gamma}[GeV^{-1}]")
    xaxis=p1.GetXaxis()
    xaxis.SetLimits(8,1200)
    p1.SetMaximum(10**-2)
    p1.SetMinimum(10**-8)
    p1.Draw("AL")

else:
    mulgr = ROOT.TMultiGraph()
    if comp=="prod":
        data1 = pd.read_csv(pathR+'qcd_Rate1_Ordered.csv', header=None)
        data2 = pd.read_csv(pathR+'meson_Rate1_Ordered.csv', header=None)
        data3 = pd.read_csv(pathR+'pbrem_Rate1_Ordered.csv', header=None)
        data4 = pd.read_csv(pathR+'pbrem1_Rate1_Ordered.csv', header=None)
        d20, d21 = array('f'), array('f')
        d30, d31 = array('f'), array('f')
        d10, d11 = array('f'), array('f')
        d40, d41 = array('f'), array('f')
        for i in data1[0]: d10.append(float(i))
        for i in data1[1]: d11.append(float(i))
        for i in data2[0]: d20.append(float(i))
        for i in data2[1]: d21.append(float(i))
        for i in data3[0]: d30.append(float(i))
        for i in data3[1]: d31.append(float(i))
        for i in data4[0]: d40.append(float(i))
        for i in data4[1]: d41.append(float(i))
        p2=ROOT.TGraph(len(data2[1]),d20, d21)
        p4=ROOT.TGraph(len(data4[1]),d40, d41)
        p3=ROOT.TGraph(len(data3[1]),d30, d31)
        p1=ROOT.TGraph(len(data1[1]),d10, d11)
        p4.SetLineColor(6)
        p3.SetLineColor(8)
        p2.SetLineColor(2)
        p1.SetLineColor(4)
        p4.SetMarkerColor(6)
        p3.SetMarkerColor(8)
        p2.SetMarkerColor(2)
        p1.SetMarkerColor(4)
        p4.SetLineWidth(1)
        p3.SetLineWidth(1)
        p2.SetLineWidth(1)
        p1.SetLineWidth(1)
        p4.SetTitle("Pbrem Dipole")
        p3.SetTitle("Pbrem VDM")
        p2.SetTitle("Meson")
        p1.SetTitle("QCD")
        mulgr.Add(p1)
        mulgr.Add(p2)
        mulgr.Add(p4)
        mulgr.Add(p3)
        data1P = pd.read_csv(pathR+'qcd_ErrorRateP_Ordered.csv', header=None)
        data2P = pd.read_csv(pathR+'meson_ErrorRateP_Ordered.csv', header=None)
        data3P = pd.read_csv(pathR+'pbrem_ErrorRateP_Ordered.csv', header=None)
        data4P = pd.read_csv(pathR+'pbrem1_ErrorRateP_Ordered.csv', header=None)
        d20P, d21P = array('f'), array('f')
        d30P, d31P = array('f'), array('f')
        d10P, d11P = array('f'), array('f')
        d40P, d41P = array('f'), array('f')
        for i in data1P[0]: d10P.append(float(i))
        for i in data1P[1]: d11P.append(float(i))
        for i in data2P[0]: d20P.append(float(i))
        for i in data2P[1]: d21P.append(float(i))
        for i in data3P[0]: d30P.append(float(i))
        for i in data3P[1]: d31P.append(float(i))
        for i in data4P[0]: d40P.append(float(i))
        for i in data4P[1]: d41P.append(float(i))
        p2P=ROOT.TGraph(len(data2P[1]),d20P, d21P)
        p4P=ROOT.TGraph(len(data4P[1]),d40P, d41P)
        p3P=ROOT.TGraph(len(data3P[1]),d30P, d31P)
        p1P=ROOT.TGraph(len(data1P[1]),d10P, d11P)
        p4P.SetLineColor(6)
        p3P.SetLineColor(8)
        p2P.SetLineColor(2)
        p1P.SetLineColor(4)
        p4P.SetLineStyle(2)
        p3P.SetLineStyle(2)
        p2P.SetLineStyle(2)
        p1P.SetLineStyle(2)
        p4P.SetMarkerColor(6)
        p3P.SetMarkerColor(8)
        p2P.SetMarkerColor(2)
        p1P.SetMarkerColor(4)
        p4P.SetLineWidth(1)
        p3P.SetLineWidth(1)
        p2P.SetLineWidth(1)
        p1P.SetLineWidth(1)
        p4P.SetTitle("")
        p3P.SetTitle("")
        p2P.SetTitle("")
        p1P.SetTitle("")
        mulgr.Add(p1P)
        mulgr.Add(p2P)
        mulgr.Add(p4P)
        mulgr.Add(p3P)
        data1M = pd.read_csv(pathR+'qcd_ErrorRateM_Ordered.csv', header=None)
        data2M = pd.read_csv(pathR+'meson_ErrorRateM_Ordered.csv', header=None)
        data3M = pd.read_csv(pathR+'pbrem_ErrorRateM_Ordered.csv', header=None)
        data4M = pd.read_csv(pathR+'pbrem1_ErrorRateM_Ordered.csv', header=None)
        d20M, d21M = array('f'), array('f')
        d30M, d31M = array('f'), array('f')
        d10M, d11M = array('f'), array('f')
        d40M, d41M = array('f'), array('f')
        for i in data1M[0]: d10M.append(float(i))
        for i in data1M[1]: d11M.append(float(i))
        for i in data2M[0]: d20M.append(float(i))
        for i in data2M[1]: d21M.append(float(i))
        for i in data3M[0]: d30M.append(float(i))
        for i in data3M[1]: d31M.append(float(i))
        for i in data4M[0]: d40M.append(float(i))
        for i in data4M[1]: d41M.append(float(i))
        p2M=ROOT.TGraph(len(data2M[1]),d20M, d21M)
        p4M=ROOT.TGraph(len(data4M[1]),d40M, d41M)
        p3M=ROOT.TGraph(len(data3M[1]),d30M, d31M)
        p1M=ROOT.TGraph(len(data1M[1]),d10M, d11M)
        p4M.SetLineColor(6)
        p3M.SetLineColor(8)
        p2M.SetLineColor(2)
        p1M.SetLineColor(4)
        p4M.SetLineStyle(2)
        p3M.SetLineStyle(2)
        p2M.SetLineStyle(2)
        p1M.SetLineStyle(2)
        p4M.SetMarkerColor(6)
        p3M.SetMarkerColor(8)
        p2M.SetMarkerColor(2)
        p1M.SetMarkerColor(4)
        p4M.SetLineWidth(1)
        p3M.SetLineWidth(1)
        p2M.SetLineWidth(1)
        p1M.SetLineWidth(1)
        p4M.SetTitle("")
        p3M.SetTitle("")
        p2M.SetTitle("")
        p1M.SetTitle("")
        mulgr.Add(p1M)
        mulgr.Add(p2M)
        mulgr.Add(p4M)
        mulgr.Add(p3M)

    if comp=="comb":
        dataC = pd.read_csv(pathR+'comb_Rate1_Ordered.csv', header=None)
        dataO = pd.read_csv(pathR+'comb1_Rate1_Ordered.csv', header=None)
        dC0, dC1 = array('f'), array('f')
        d00, d01 = array('f'), array('f')
        for i in dataO[0]: d00.append(float(i))
        for i in dataO[1]: d01.append(float(i))
        for i in dataC[0]: dC0.append(float(i))
        for i in dataC[1]: dC1.append(float(i))
        pC=ROOT.TGraph(len(dataC[1]),dC0, dC1)
        p0=ROOT.TGraph(len(dataO[1]),d00, d01)
        pC.SetLineColor(8)
        p0.SetLineColor(6)
        pC.SetMarkerColor(8)
        p0.SetMarkerColor(6)
        pC.SetLineWidth(1)
        p0.SetLineWidth(1)
        pC.SetTitle("Combined VDM")
        p0.SetTitle("Combined Dipole")
        mulgr.Add(p0)
        mulgr.Add(pC)
        dataCP = pd.read_csv(pathR+'comb_ErrorRateP_Ordered.csv', header=None)
        dataOP = pd.read_csv(pathR+'comb1_ErrorRateP_Ordered.csv', header=None)
        dC0P, dC1P = array('f'), array('f')
        d00P, d01P = array('f'), array('f')
        for i in dataOP[0]: d00P.append(float(i))
        for i in dataOP[1]: d01P.append(float(i))
        for i in dataCP[0]: dC0P.append(float(i))
        for i in dataCP[1]: dC1P.append(float(i))
        pCP=ROOT.TGraph(len(dataCP[1]),dC0P, dC1P)
        p0P=ROOT.TGraph(len(dataOP[1]),d00P, d01P)
        pCP.SetLineColor(8)
        p0P.SetLineColor(6)
        pCP.SetLineStyle(2)
        p0P.SetLineStyle(2)
        pCP.SetMarkerColor(8)
        p0P.SetMarkerColor(6)
        pCP.SetLineWidth(1)
        p0P.SetLineWidth(1)
        pCP.SetTitle("")
        p0P.SetTitle("")
        mulgr.Add(p0P)
        mulgr.Add(pCP)
        dataCM = pd.read_csv(pathR+'comb_ErrorRateM_Ordered.csv', header=None)
        dataOM = pd.read_csv(pathR+'comb1_ErrorRateM_Ordered.csv', header=None)
        dC0M, dC1M = array('f'), array('f')
        d00M, d01M = array('f'), array('f')
        for i in dataOM[0]: d00M.append(float(i))
        for i in dataOM[1]: d01M.append(float(i))
        for i in dataCM[0]: dC0M.append(float(i))
        for i in dataCM[1]: dC1M.append(float(i))
        pCM=ROOT.TGraph(len(dataCM[1]),dC0M, dC1M)
        p0M=ROOT.TGraph(len(dataOM[1]),d00M, d01M)
        pCM.SetLineColor(8)
        p0M.SetLineColor(6)
        pCM.SetLineStyle(2)
        p0M.SetLineStyle(2)
        pCM.SetMarkerColor(8)
        p0M.SetMarkerColor(6)
        pCM.SetLineWidth(1)
        p0M.SetLineWidth(1)
        pCM.SetTitle("")
        p0M.SetTitle("")
        mulgr.Add(p0M)
        mulgr.Add(pCM)

    excldL=pd.read_csv('../Exclusion/Dataset_DP_excluded_left.csv', header=None)
    excldU=pd.read_csv('../Exclusion/Dataset_DP_excluded_upper.csv', header=None)
    eL0, eL1 = array('f'), array('f')
    eU0, eU1 = array('f'), array('f')
    for i in excldL[0]: eL0.append(float(i))
    for i in excldL[1]: eL1.append(float(i))
    for i in excldU[0]: eU0.append(float(i))
    for i in excldU[1]: eU1.append(float(i))
    eL=ROOT.TGraph(len(excldL[1]),eL0, eL1)
    eU=ROOT.TGraph(len(excldU[1]),eU0, eU1)
    eL.SetLineColor(17)
    eU.SetLineColor(17)
    eL.SetMarkerColor(17)
    eU.SetMarkerColor(17)
    eL.SetFillColor(17)
    eU.SetFillColor(17)
    eL.Draw("AF")
    eL.SetTitle(";m_{#gamma^{D}}(MeV/c^{2});#varepsilon^{2}")
    eU.SetTitle("")
    xaxis=eL.GetXaxis()
    xaxis.SetLimits(2,3700)
    eL.SetMaximum(10**-5)
    eL.SetMinimum(10**-18)
    eU.Draw("F")
    eU.SetTitle("Excluded Region")
    mulgr.Add(eU)
    #for lim in ['AWAKE','BE','LDMX','MATHUSLA200','FASERS','NA64','NA62','REDTOP','OLD']:
    #for lim in ['AWAKE','BE','LDMX','MATHUSLA200','NA64','NA62']:
    """for lim in['NA62']:
        limit = pd.read_csv('../Exclusion/Order_'+lim+'.csv', header=None)
        l0, l1 = array('f'), array('f')
        for i in limit[0]: l0.append(float(i))
        for i in limit[1]: l1.append(float(i)**2.)
        li = ROOT.TGraph(len(l1),l0,l1)
        li.SetLineWidth(1)
        li.SetLineColor(1)
        li.SetMarkerColor(1)
        li.SetFillColor(1)
        li.Draw("F")
        #li.SetTitle("Excluded Region")
        mulgr.Add(li)"""
    mulgr.Draw("L")
    mulgr.SetTitle(";m_{#gamma^{D}}(MeV/c^{2});#varepsilon^{2}")
    xaxis=mulgr.GetXaxis()
    xaxis.SetLimits(2,3700)
    mulgr.SetMaximum(10**-5)
    mulgr.SetMinimum(10**-18)
    #c1.BuildLegend()
    Leg=c1.BuildLegend(0.75,0.70,0.95,.9)
    #Leg.DeleteEntry
    Leg.Draw()

c1.Modify()
c1.Update()
c1.SaveAs(pathR+"Excl_"+str(comp)+".pdf")
c1.Print(pathR+"Excl_"+str(comp)+".root")
c1.SetLogx()
c1.Modify()
c1.Update()
c1.SaveAs(pathR+"Excl_"+str(comp)+"Log.pdf")
c1.Print(pathR+"Excl_"+str(comp)+"Log.root")
c1.Print(pathR+"Excl_"+str(comp)+"Log.C")
