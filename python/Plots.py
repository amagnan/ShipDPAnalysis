import ROOT as r
from array import array
import os,sys,getopt
try:
    opts, args = getopt.getopt(sys.argv[1:], "d:p:")

except getopt.GetoptError:
    print 'no file'
    sys.exit()

for o,a in opts:
    if o in ('-d',): date = a
    if o in ('-p',): prod = a

pathR = "../data/"+date+"/"

e     =   open(pathR+prod+'_Ana_e.dat','r')
mu    =   open(pathR+prod+'_Ana_mu.dat','r')
tau   =   open(pathR+prod+'_Ana_tau.dat','r')
had   =   open(pathR+prod+'_Ana_hadron.dat','r')
oth   =   open(pathR+prod+'_Ana_other.dat','r')
All   =   open(pathR+prod+'_Ana_all.dat','r')
Sum   =   open(pathR+prod+'_Ana_sum.dat','r')

c1  = r.TCanvas('c1', '',1920,1080)

br  = r.TMultiGraph()
reco = r.TMultiGraph()
vtx = r.TMultiGraph()
dau = r.TMultiGraph()
 
e_eps,  mu_eps,     tau_eps,    had_eps,    oth_eps,    all_eps  = array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' )
e_mass, mu_mass,    tau_mass,   had_mass,   oth_mass,   all_mass = array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' )
e_br,   mu_br,      tau_br,     had_br,     all_br               = array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' )
e_vtx,  mu_vtx,     tau_vtx,    had_vtx,    all_vtx              = array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' )
e_reco, mu_reco,    tau_reco,   had_reco,   all_reco             = array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' ), array( 'd' )

oth_dau, all_dau = array( 'd' ), array( 'd' )

def looping(line,itsmass,itseps,itsbr,itsves,itsreco):
    for i in line:
        i = i.replace('\n','')
        i = i.split(' ')
        #print i[1],i[4]
        itsmass.append(float(i[0]))
        itseps.append(float(i[1]))
        itsbr.append(float(i[2]))
        itsves.append(float(i[3]))
        itsreco.append(float(i[4]))

def looping_all(line,itsmass,itseps,itsdau,itsbr,itsvtx,itsreco):
    for i in line:
        i = i.replace('\n','')
        i = i.split(' ')      
        #print i[0],i[1]
        itsmass.append(float(i[0]))
        itseps.append(float(i[1]))
        itsdau.append(float(i[2]))
        itsbr.append(float(i[3]))
        itsreco.append(float(i[5]))
        itsvtx.append(float(i[4]))
 
def looping_oth(line,itsmass,itseps,itsdau):
     for i in line:
        i = i.replace('\n','')
        i = i.split(' ') 
        itsmass.append(float(i[0]))
        itseps.append(float(i[1]))
        itsdau.append(float(i[2]))

line_e     =   e.readlines() 
line_mu    =   mu.readlines() 
line_tau   =   tau.readlines()
line_had   =   had.readlines()
line_oth   =   oth.readlines()
line_all   =   All.readlines()
line_sum   =   Sum.readlines()

looping(line_e,e_mass,e_eps,e_br,e_vtx,e_reco)
looping(line_mu,mu_mass,mu_eps,mu_br,mu_vtx,mu_reco)
looping(line_tau,tau_mass,tau_eps,tau_br,tau_vtx,tau_reco)
looping(line_had,had_mass,had_eps,had_br,had_vtx,had_reco)
looping_all(line_all,all_mass,all_eps,all_dau,all_br,all_vtx,all_reco)
looping_oth(line_oth,oth_mass,oth_eps,oth_dau)

if len(e_mass)!=0.:
    n=len(e_mass)
    #print e_br
    e_Br=r.TGraph(n,e_mass,e_br)
    e_Reco=r.TGraph(len(e_mass),e_mass,e_reco)
    e_Vtx=r.TGraph(len(e_mass),e_mass,e_vtx)
    e_Br.SetName("e_Br")
    e_Reco.SetName("e_Reco")
    e_Vtx.SetName("e_Vtx")
    e_Br.SetMarkerColor(2)
    e_Reco.SetMarkerColor(2)
    e_Vtx.SetMarkerColor(2)
    e_Br.SetMarkerStyle(39)
    e_Reco.SetMarkerStyle(43)
    e_Vtx.SetMarkerStyle(43)
    e_Br.SetLineColor(2)
    e_Reco.SetLineColor(2)
    e_Vtx.SetLineColor(2)
    e_Br.SetLineWidth(3)
    e_Reco.SetLineWidth(3)
    e_Vtx.SetLineWidth(3)
    e_Br.SetTitle("e^{+} + e^{-}") 
    e_Reco.SetTitle("e^{+} + e^{-}")
    e_Vtx.SetTitle("e^{+} + e^{-}")
    e_Br.SetFillStyle(0) 
    e_Reco.SetFillStyle(0)
    e_Vtx.SetFillStyle(0)
    e_Br.SetDrawOption("ALP")
    e_Reco.SetDrawOption("AP")
    e_Vtx.SetDrawOption("AP")
    br.Add(e_Br)
    reco.Add(e_Reco)
    vtx.Add(e_Vtx)

if len(mu_mass)!=0.:
    mu_Br=r.TGraph(len(mu_mass),mu_mass,mu_br)
    mu_Reco=r.TGraph(len(mu_mass),mu_mass,mu_reco)
    mu_Vtx=r.TGraph(len(mu_mass),mu_mass,mu_vtx)
    mu_Br.SetName("mu_Br")
    mu_Reco.SetName("mu_Reco")
    mu_Vtx.SetName("mu_Vtx")
    mu_Br.SetMarkerColor(3)
    mu_Reco.SetMarkerColor(3)
    mu_Vtx.SetMarkerColor(3)
    mu_Br.SetMarkerStyle(20)
    mu_Reco.SetMarkerStyle(20)
    mu_Vtx.SetMarkerStyle(20)
    mu_Br.SetLineColor(3)
    mu_Reco.SetLineColor(3)
    mu_Vtx.SetLineColor(3)
    mu_Br.SetLineWidth(3)
    mu_Reco.SetLineWidth(3)
    mu_Vtx.SetLineWidth(3)
    mu_Br.SetTitle("#mu^{+} + #mu^{-}") 
    mu_Reco.SetTitle("#mu^{+} + #mu^{-}")
    mu_Vtx.SetTitle("#mu^{+} + #mu^{-}")
    mu_Br.SetFillStyle(0) 
    mu_Reco.SetFillStyle(0)
    mu_Vtx.SetFillStyle(0)
    mu_Br.SetDrawOption("ALP")
    mu_Reco.SetDrawOption("AP")
    mu_Vtx.SetDrawOption("AP")
    br.Add(mu_Br)
    reco.Add(mu_Reco)
    vtx.Add(mu_Vtx)

if len(tau_mass)!=0.:
    tau_Br=r.TGraph(len(tau_mass),tau_mass,tau_br)
    tau_Reco=r.TGraph(len(tau_mass),tau_mass,tau_reco)
    tau_Vtx=r.TGraph(len(tau_mass),tau_mass,tau_vtx)
    tau_Br.SetName("tau_Br")
    tau_Reco.SetName("tau_Reco")
    tau_Vtx.SetName("tau_Vtx")
    tau_Br.SetMarkerColor(93)
    tau_Reco.SetMarkerColor(93)
    tau_Vtx.SetMarkerColor(93)
    tau_Br.SetMarkerStyle(21)
    tau_Reco.SetMarkerStyle(21)
    tau_Vtx.SetMarkerStyle(21)
    tau_Br.SetLineColor(93)
    tau_Reco.SetLineColor(93)
    tau_Vtx.SetLineColor(93)
    tau_Br.SetLineWidth(3)
    tau_Reco.SetLineWidth(3)
    tau_Vtx.SetLineWidth(3)
    tau_Br.SetTitle("#tau^{+} + #tau^{-}") 
    tau_Reco.SetTitle("#tau^{+} + #tau^{-}")
    tau_Vtx.SetTitle("#tau^{+} + #tau^{-}")
    tau_Br.SetFillStyle(0) 
    tau_Reco.SetFillStyle(0)
    tau_Vtx.SetFillStyle(0)
    tau_Br.SetDrawOption("ALP")
    tau_Reco.SetDrawOption("AP")
    tau_Vtx.SetDrawOption("AP")
    br.Add(tau_Br)
    reco.Add(tau_Reco)
    vtx.Add(tau_Vtx)

if len(had_mass)!=0.:
    had_Br=r.TGraph(len(had_mass),had_mass,had_br)
    had_Reco=r.TGraph(len(had_mass),had_mass,had_reco)
    had_Vtx=r.TGraph(len(had_mass),had_mass,had_vtx)
    had_Br.SetName("had_Br")
    had_Reco.SetName("had_Reco")
    had_Vtx.SetName("had_Vtx")
    had_Br.SetMarkerColor(5)
    had_Reco.SetMarkerColor(5)
    had_Vtx.SetMarkerColor(5)
    had_Br.SetMarkerStyle(22)
    had_Reco.SetMarkerStyle(22) 
    had_Vtx.SetMarkerStyle(22)
    had_Br.SetLineColor(5)
    had_Reco.SetLineColor(5)
    had_Vtx.SetLineColor(5)
    had_Br.SetLineWidth(3)
    had_Reco.SetLineWidth(3)
    had_Vtx.SetLineWidth(3)
    had_Br.SetTitle("hadrons") 
    had_Reco.SetTitle("hadrons")
    had_Vtx.SetTitle("hadrons")
    had_Br.SetFillStyle(0) 
    had_Reco.SetFillStyle(0)
    had_Vtx.SetFillStyle(0)
    had_Br.SetDrawOption("ALP")
    had_Reco.SetDrawOption("AP")
    had_Vtx.SetDrawOption("AP")
    br.Add(had_Br)
    reco.Add(had_Reco)
    vtx.Add(had_Vtx)

if len(all_mass)!=0.:
    all_Br=r.TGraph(len(all_mass),all_mass,all_br)
    all_Dau=r.TGraph(len(all_mass),all_mass,all_dau)
    all_Reco=r.TGraph(len(all_mass),all_mass,all_reco)
    all_Vtx=r.TGraph(len(all_mass),all_mass,all_vtx)
    all_Br.SetName("all_Br")
    all_Dau.SetName("all_Dau")
    all_Reco.SetName("all_Reco")
    all_Vtx.SetName("all_Vtx")
    all_Br.SetMarkerColor(7)
    all_Dau.SetMarkerColor(7)
    all_Reco.SetMarkerColor(7)
    all_Vtx.SetMarkerColor(7)
    all_Br.SetMarkerStyle(23)
    all_Dau.SetMarkerStyle(23)
    all_Reco.SetMarkerStyle(23) 
    all_Vtx.SetMarkerStyle(23)
    all_Br.SetLineColor(7)
    all_Dau.SetLineColor(7)
    all_Reco.SetLineColor(7)
    all_Vtx.SetLineColor(7)
    all_Br.SetLineWidth(3)
    all_Dau.SetLineWidth(3)
    all_Reco.SetLineWidth(3)
    all_Vtx.SetLineWidth(3)
    all_Br.SetTitle("All modes") 
    all_Dau.SetTitle("All modes") 
    all_Reco.SetTitle("All modes")
    all_Vtx.SetTitle("All modes")
    all_Br.SetFillStyle(0) 
    all_Dau.SetFillStyle(0) 
    all_Reco.SetFillStyle(0)
    all_Vtx.SetFillStyle(0)
    all_Br.SetDrawOption("ALP")
    #all_Dau.SetDrawOption("ALP")
    all_Reco.SetDrawOption("AP")
    all_Vtx.SetDrawOption("AP")
    br.Add(all_Br)
    dau.Add(all_Dau)
    reco.Add(all_Reco)
    vtx.Add(all_Vtx)

if len(oth_mass)!=0.:
    oth_Dau=r.TGraph(len(oth_mass),oth_mass,oth_dau)
    oth_Dau.SetName("oth_Br")
    oth_Dau.SetMarkerColor(28)
    oth_Dau.SetMarkerStyle(47)
    oth_Dau.SetLineColor(28)
    oth_Dau.SetLineWidth(3)
    oth_Dau.SetTitle("Nr. of Events of Unproper Daughters") 
    oth_Dau.SetFillStyle(0) 
    #oth_Dau.SetDrawOption("ALP")
    dau.Add(oth_Dau)
 
br.SetTitle(";Mass(GeV);Branching Ratios")
br.Draw("ALP")
c1.BuildLegend()
c1.Update()
c1.Print(pathR+prod+"_br.root")

vtx.SetTitle(";Mass(GeV);Vessel Probability")
vtx.Draw("AP")
c1.BuildLegend()
c1.Update()
c1.Print(pathR+prod+"_vtx.root")

reco.SetTitle(";Mass(GeV);Reconstruction Efficiency")
reco.Draw("AP")
c1.BuildLegend()
c1.Update()
c1.Print(pathR+prod+"_reco.root")

dau.SetTitle(";Mass(GeV);#epsilon;number of un/proper events/all DP events")
dau.Draw("ALP")
c1.BuildLegend()
c1.Update()
c1.Print(pathR+prod+"_dau.root")
